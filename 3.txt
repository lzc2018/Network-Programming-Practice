1：         客户端								服务器端
			socket                               socket
												  bind	
												 listen														
			connect	 （连接请求，TCP三次握手）	 accept
		read       write                     read      write
            close								  close

客户端进程向操作系统内核发起 write 字节流写操作，内核协议栈将字节流通过网络设备传输到服务器端，服务器端从内核得到
信息，将字节流从内核读入到进程中，并开始业务逻辑的处理，完成之后，服务器端再将得到的结果以同样的方式写给客户端。
可以看到，一旦连接建立，数据的传输就不再是单向的，而是双向的，这也是 TCP 的一个显著特性。

2：问答
(1)可以想一想 IPv4、IPv6、本地套接字格式以及通用地址套接字，它们有什么共性呢？如果你是 BSD 套接字的设计者，你为什么要这样设计呢？
像sock_addr的结构体里描述的那样，几种套接字都要有地址族和地址两个字段。这容易理解，你要与外部通信，肯定要至少告诉
计算机对方的地址和使用的是哪一种地址。与远程计算机的通信还需要一个端口号。而本地socket的不同之处在于不需要端口号，
那么就有了问题2;

(2)为什么本地套接字格式不需要端口号，而 IPv4 和 IPv6套接字格式却需要端口号呢？
本地socket本质上是在访问本地的文件系统，因此只需要根据文件路径便可区分,所以自然不需要端口。远程socket是直接将一段
字节流发送到远程计算机的一个进程，而远程计算机可能同时有多个进程在监听，所以用端口号标定要发给哪一个进程。

protocol family:协议族
Telnet：远程登录
